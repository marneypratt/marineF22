---
title: "Indepedent Project Analysis 2 Factor Analysis"
author: "Marney"
format: html
editor: visual
---

## Getting Setup

Keep all of your analysis in this same .Qmd file and keep all the associated files in the project folder. Make sure the project name is showing in the upper right of the RStudio window.

# Load packages

```{r setup, include=FALSE, echo=TRUE, message=FALSE, warning=FALSE}
#| echo: true
#| include: false
#| message: false
#| warning: false

library(tidyverse)
library(ggbeeswarm)

```

# Import Data

Make sure your data is in "tidy" format

Here is is a link with some information about what tidy data is: [TIDY DATA FOR EFFICIENCY, REPRODUCIBILITY, AND COLLABORATION](https://www.openscapes.org/blog/2020/10/12/tidy-data/)

I recommend using a csv file to store your dataset and then using readr to import it. One easy way to share data with a collaborator but still import into R is to use Google Sheets and then go to File --\> Share--\> "publish to the web" as a csv

Make sure to select "Comma-separated values (.csv)" and copy the URL for the link shown as seen in the image below:

![](images/save_to_web.png){fig-alt="Under link make sure that entire document and comma-separated values (.csv) are selected when you publish to the web. Copy the link shown." width="457"}

Paste the URL into the blank below then run the code chuck to import

```{r import data}


my.data <- read_csv("https://docs.google.com/spreadsheets/d/e/2PACX-1vS42jIoyDSNa9PBCrP1vDnAphrTkuirfKf4nkU4Bab0EgebRpi_yvesRwPk-XgQCMsfhGHTWtYQkXXh/pub?gid=0&single=true&output=csv")

```

# Data Wrangling

To get your data ready to graph, you will need to do some calculations and other "wrangling" to get it in shape. You can do this in Excel or Google Sheets and then upload the dataset once it is fully ready to graph. Your dataset is ready to graph when it is in "tidy" format and each row represents a single value for each behavior from each observational period

Here is an example of a "tidy" dataset that is in raw format (no wrangling done): [raw example dataset](https://docs.google.com/spreadsheets/d/1wYSSC5Ji5ZBub-jDIItC6VNt3DG_lWmtE4KV4VvljqA/edit?usp=sharing)

Here is an example of the same dataset once it is ready to graph: [summarized example dataset](https://docs.google.com/spreadsheets/d/1GzYmA1JeUeK9VwwhrxfnipUaOH6ZXQbTJ4E23EfK0X8/edit?usp=sharing)

If you want to try doing the data wrangling with R, find the code you need by looking in the "data_wrangling" folder within the "script_templates" folder. Copy and paste the code you need in the chunk below.

```{r data wrangling}

my.data.long <- my.data %>% 
  
  #filter out when no otters were visible
  filter(out_view<3) %>% 
  
  #change from wide to long format to make one column for all behaviors
  #replace first blank with name of first behavior column
  #replace second blank with name of last behavior column
  pivot_longer(cols = rest_shore:other,
               names_to = "behavior",
               values_to = "number_obs") %>% 

  #calculate percent observed of otters in view
  mutate(percent_obs = number_obs/in_view*100)
  

summary.data <- my.data.long %>% 
  
  #calculate the average percentage of animals observed doing a particular behavior
  #for each observational time period
  #make sure to group by any factors that want to split into
  #replace the first blank with the name of the column with your factor you want to compare
  #replace the second blank with a unique identifier for each observational time period
  group_by(time_period, observation_num, behavior) %>% 
  summarize(ave_percent_obs = mean(percent_obs)) 
  


#reorder factors
summary.data$time_period <- factor(summary.data$time_period, levels=c("morning", "afternoon"))

summary.data$behavior <- factor(summary.data$behavior, 
                                levels=c("foraging", 
                                         "swimming",
                                         "interact_shore",
                                         "interact_water",
                                         "rest_shore",
                                         "rest_water",
                                         "other"))

#make nicer labels for behaviors (must be in same order as the factor)
 behavior_names <- c("foraging", 
                     "swimming",
                     "interacting on the shore",
                     "interacting in the water", 
                     "resting on the shore",
                     "resting in the water",
                     "other")


```

# Data Description

Find the code you need to describe your data by looking in the "descriptive_stats" folder within the "script_templates" folder. Copy and paste the code you need in the chunk below.

```{r descriptive stats}

desc.stat <- summary.data %>% # put the name of the data frame here
  group_by(time_period, behavior) %>% # put the name of the grouping variables here
  summarize(mean = mean(ave_percent_obs), # put the name of the variable you want to summarize in this & following blanks
            median = median(ave_percent_obs), 
            SD = sd(ave_percent_obs), 
            IQR = IQR(ave_percent_obs), 
            min = min(ave_percent_obs),
            max = max(ave_percent_obs),
            sample_size = n())

desc.stat


```

# Data Visualization

Find the code you need to visualize (=graph) your data by looking in the "graphing" folder within the "script_templates" folder. Copy and paste the code you need in the chunk below.

```{r dotplot graph}

ggplot(
  data = summary.data, 
  aes(x = behavior, y = ave_percent_obs, fill=time_period, color=time_period)) +  
  geom_quasirandom( 
    shape=21, size=2, alpha = 0.5, width=0.2, #play with these values as needed
    dodge.width = 1) + #adjust the dodge width as needed
  stat_summary(fun = median, 
               fun.min = median, 
               fun.max = median, #change median to mean if desired
               geom = "crossbar", na.rm = TRUE,
               width = 0.4, size = 0.75, #play with these values as needed
               position=position_dodge(width=1),
               show.legend = FALSE) + #match this width to dodge.width above
  scale_fill_discrete(name="Time Period") +
  guides(color = "none") +
  scale_x_discrete(labels = behavior_names) +
  ylab("Percent Observed") +
  xlab("Behavior") +
  coord_cartesian(expand=TRUE) +
  theme_classic(base_size=16) +
  theme(axis.text.x = element_text(size=10, angle=45, hjust=1, vjust=1))  


```

To save your graph with the `ggsave()` function, you need to name the resulting file with surrounding " ", and indicate the size via height, width, and units. Don't forget to save the graph with a dpi call between 300-500 to make it nice and crisp! Look at the `ggsave()` help file for more information and options.

the way the code below is setup, it will save the last graph you made replace the blank with a name to give your graph file

```{r Save your graph, eval = F}

# save the graph!
ggsave(filename="dotplot_graph.png",  #recommended to use.png or .jpg file types
       height = 7, width = 8, units = "in", 
       dpi = 300)

```

```{r stacked graph}


ggplot(
  data = summary.data, 
  aes(x=time_period, y=ave_percent_obs, fill = behavior))+
  geom_bar(position = "fill", stat="identity")+
  scale_fill_discrete(name="Behaviors",
                      labels=behavior_names) +
  xlab("Time Period") +
  ylab("Percent Observed") +
  coord_cartesian(expand=FALSE, clip='off') +
  scale_y_continuous(labels = scales::percent_format()) +
  theme_classic(base_size=12)  



```

To save your graph with the `ggsave()` function, you need to name the resulting file with surrounding " ", and indicate the size via height, width, and units. Don't forget to save the graph with a dpi call between 300-500 to make it nice and crisp! Look at the `ggsave()` help file for more information and options.

the way the code below is setup, it will save the last graph you made replace the blank with a name to give your graph file

```{r Save your graph, eval = F}

# save the graph!
ggsave(filename="stacked_graph.png",  #recommended to use.png or .jpg file types
       height = 7, width = 8, units = "in", 
       dpi = 300)

```


```{r}
# this code will make a bar graph with means and standard errors

#first calculate the mean, sd, & count the observations in each group
df.sum <- summary.data %>%               #data frame name here
  group_by(time_period, behavior) %>%        #name of 2 factors here
  summarise(mean = mean(ave_percent_obs),   #continuous variable here
            sd = sd(ave_percent_obs),       #same continuous variable as above here
            n = n()) 

#make bar graph
ggplot(
  data=df.sum, 
  aes(x=behavior, y=mean, fill=time_period)) + #behavior for x, 2nd factor as fill
  geom_bar(stat="identity", position="dodge", width = 0.5)+
  geom_errorbar(aes(ymin=mean-sd, ymax=mean+sd), 
                position=position_dodge(width = 0.5), #this width must match width in geom_bar above
                width=0.2, size=0.5, show.legend = FALSE) +
  scale_fill_discrete(name="Time Period") +
  scale_x_discrete(labels = behavior_names) +
  ylab("Percent Observed") +
  xlab("Behavior") +
  coord_cartesian(ylim = c(0,100), expand=TRUE) +
  theme_classic(base_size=16) +
  theme(axis.text.x = element_text(size=10, angle=45, hjust=1, vjust=1)) 


```

